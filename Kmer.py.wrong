__author__ = 'jaemin'
from collections import Counter
import numpy as np
import pykov
import os
import sys
from scipy.stats import pearsonr

class Kmer:
#	bp = ["H","T","A"]
#	bp = ["H","T","A","h","t","a"]
	bp = ["A","G","C","T"]
	def __init__(self):
#		self.bp = ["H","T","A"]
		pass
	def initial(self,year,kmer_num):
		self.year = year
		self.kmer_num = kmer_num
		self.Kmer = [[Counter() for ii in range(0,self.year)] for jj in range(0,self.kmer_num)]
		pass
	def insert_chromo(self,chromo_list):
		for kmer_index in range(0,self.kmer_num): # Kmer Indexes
			for year_list in range(0,len(chromo_list)): # Year List
				for c_list in range(0,len(chromo_list[year_list])): #MLB Teams 0~30
					num_kmers = len(chromo_list[year_list][c_list])-(kmer_index+2)+1
					for ii in range(num_kmers):
						self.Kmer[kmer_index][year_list]\
						[chromo_list[year_list][c_list][ii:ii + kmer_index+2]] += 1
		"""	
		for kmer_index in range(0,self.kmer_num): # Kmer Indexes
			for year_list in range(0,self.year): # Year List
				pass
				print str(kmer_index+2)+"\t20"+str(year_list+12)
				print self.Kmer[kmer_index][year_list].most_common(20)
		"""
	def maximum_likelihood(self,chromo,kmer):
		#if kmer == 2 chromo size is 1 we estimate another character
		# find top 10 for all the year
		new_chromo=[]
		for ii in self.bp:
			new_chromo.append(chromo+ii)
#for odds score consider
#impact_factor=[0.6,0.55,0.45,0.4]

		impact_factor=[1.0 for ii in range(0,len(self.bp))]
		m_c = 0
		if kmer == 2:
			m_c = 7
		elif kmer == 3:
			m_c = 10
		elif kmer == 4:
			m_c = 15
		elif kmer == 5:
			m_c = 20
		elif kmer == 6:
			m_c = 30
		elif kmer == 7:
			m_c = 100
		result = [0.0 for ii in range(0,len(self.bp))]
		for ii in range(0,len(self.bp)): # case study for 4 characters
			for year_list in range(0,self.year):
				Temp = self.Kmer[kmer-2][year_list].most_common(m_c)
				for jj in Temp:
					char,cnt = jj
					if new_chromo[ii] == char:
						result[ii] += 1.0/impact_factor[ii]
		#print result
		return result
	def estimate_result(self,chromo):
		result = np.array([0.0 for ii in range(0,len(self.bp))])
		impact_factor = [1.0,1.5,2.0,4.0,8.0,10.0]
		for ii in range(0,self.kmer_num):
			result_np = np.array(self.maximum_likelihood(chromo[len(chromo)-(ii+1):len(chromo)],ii+2))
			result += result_np*impact_factor[ii]
		#print result
		for jj in range(0,len(self.bp)):
			if result[jj] == max(result):
				return self.bp[jj]
fout = open("mlb_result.txt",'w')
history = Counter()
if sys.argv[1] =="all":
	start = 0
	end = 4
else:
	start = int(sys.argv[1])-2012
	end = start+1
for mlb_iter in range(start,end):
####################################################################
	myKmer = Kmer()
	myKmer2 = Kmer()
#year = int(sys.argv[1])-2007 # 8 is the default value
	year = mlb_iter
	myKmer.initial(4,4)
#	myKmer.initial(8,4)
####################################################################
	kmer_list_opp = []
	kmer_list_list_opp = []
	kmer_2015_opp = []
	ch_start = 0
	ch_end = 4
	for ii in range(ch_start,ch_end):
		fin_opp = open("chromo_opp.txt",'r')
		while 1:
			fin_line_opp = fin_opp.readline()
			if not fin_line_opp:
				break
			if fin_line_opp.find(str(ii+12)) != -1 and \
				fin_line_opp.find(">") != -1:
				chr_2015_opp = []
				chk_2015_opp = 0
				if fin_line_opp.find(str(year+12)) != -1 and \
				fin_line_opp.find(">") != -1:
					chk_2015_opp = 1
					chr_2015_opp.append(fin_line_opp[5:len(fin_line_opp)-1])
				fin_line_opp = fin_opp.readline()
				floats = map(int,fin_line_opp.split())
				if chk_2015_opp:
					chr_2015_opp.append(floats)
					kmer_2015_opp.append(chr_2015_opp)
				else:
					kmer_list_opp.append(floats)
				continue
		fin_opp.close()
		if ii != year:
			kmer_list_list_opp.append(kmer_list_opp)
		kmer_list_opp=[]
###################################################################
	kmer_list_odds = []
	kmer_list_list_odds = []
	kmer_2015_odds = []
	for ii in range(ch_start,ch_end):
		fin_odds = open("chromo_odds.txt",'r')
		while 1:
			fin_line_odds = fin_odds.readline()
			if not fin_line_odds:
				break
			if fin_line_odds.find(str(ii+12)) != -1 and \
				fin_line_odds.find(">") != -1:
				chr_2015_odds = []
				chk_2015_odds = 0
				if fin_line_odds.find(str(year+12)) != -1 and \
				fin_line_odds.find(">") != -1:
					chk_2015_odds = 1
					chr_2015_odds.append(fin_line_odds[5:len(fin_line_odds)-1])
				fin_line_odds = fin_odds.readline()
				floats = map(float,fin_line_odds.split())
				if chk_2015_odds:
					chr_2015_odds.append(floats)
					kmer_2015_odds.append(chr_2015_odds)
				else:
					kmer_list_odds.append(floats)
				continue
		fin_odds.close()
		if ii != year:
			kmer_list_list_odds.append(kmer_list_odds)
		kmer_list_odds=[]
###################################################################
	kmer_list = []
	kmer_list_list = []
	kmer_2015 = []
	for ii in range(ch_start,ch_end):
		fin = open("chromo.txt",'r')
		while 1:
			fin_line = fin.readline()
			if not fin_line:
				break
			if fin_line.find(str(ii+12)) != -1:
				chr_2015 = []
				chk_2015 = 0
				if fin_line.find(str(year+12)) != -1:
					chk_2015 = 1
					chr_2015.append(fin_line[5:len(fin_line)-1])
				fin_line = fin.readline()
				if chk_2015:
					chr_2015.append(fin_line[0:len(fin_line)-1])
					kmer_2015.append(chr_2015)
				else:
					kmer_list.append(fin_line[0:len(fin_line)-1])
				continue
		fin.close()
		if ii != year:
			kmer_list_list.append(kmer_list)
		kmer_list=[]
###################################################################
	myKmer.insert_chromo(kmer_list_list)
###################################################################
	win_AT = 0.0
	lose_AT = 0.0
	win_GC = 0.0
	lose_GC = 0.0

	win_A=0.0
	win_T=0.0
	win_G=0.0
	win_C=0.0
	diff_AG=0.0
	diff_CT=0.0
	lose_A=0.0
	lose_G=0.0
	lose_C=0.0
	lose_T=0.0
	yes=0.0
	no=0.0
	offset = 7 #7 is the last element we should increase number
	chk = 0
#"""
	h_win_A = Counter()
	h_win_G = Counter()
	h_win_C = Counter()
	h_win_T = Counter()
	h_diff_A = Counter()
	h_diff_G = Counter()
	h_diff_C = Counter()
	h_diff_T = Counter()
	h_lose_A = Counter()
	h_lose_G = Counter()
	h_lose_C = Counter()
	h_lose_T = Counter()
	h_opp = Counter()
	for ii in range(0,len(kmer_2015)):
		name,chromo = kmer_2015[ii]
		name_f,chromo_f = kmer_2015_odds[ii]
		name_o,chromo_o = kmer_2015_opp[ii]
		if int(sys.argv[2])==1:
			start = len(chromo)-offset
		else:
			start = 0
		for jj in range(start,len(chromo)-offset+1):
			predict_a = myKmer.estimate_result(chromo[jj:jj+6])
			opp_nid = chromo_o[jj+6]%100
			opp_game_name = chromo_o[jj+6]/100
			name_opp,chromo_opp = kmer_2015[opp_nid]
			predict_b = myKmer.estimate_result(chromo_opp[opp_game_name-6:opp_game_name])
			answer_a = chromo[jj+6]
			answer_b = chromo_opp[opp_game_name]
			odds = chromo_f[jj+6]
			odds = int(odds*10)*1.0/10.0
			answer = ""
			if odds == 1.0:
				answer = "A"
			elif odds == 2.0:
				answer = "G"
			elif odds == 3.0:
				answer = "C"
			elif odds == 4.0:
				answer = "T"
			else:
				print "Parse error"
				sys.exit(1)
			"""
			if answer_a != answer_b:
				print answer_a
				print answer_b
				print "Answer is not same"
				sys.exit(1)
			"""
			h_opp[predict_a+predict_b+answer]+=1.0
			if int(sys.argv[2])== 1:
#if int(sys.argv[2])==1 and ((predict_a+predict_b == "AA") or (predict_a+predict_b == "TT")):
				print predict_a+predict_b+" "+name+" "+name_opp
##########################################################
	win = h_opp["AAA"]
	lose = h_opp["AAC"]
	print ("AA -> A vs.C: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	win = h_opp["AAG"]
	lose = h_opp["AAT"]
	print ("AA -> G vs.T: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	win = h_opp["AGA"]+h_opp["GAA"]
	lose = h_opp["AGC"]+h_opp["GAC"]
	print ("AG or GA -> A vs.C: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	win = h_opp["AGG"]+h_opp["GAG"]
	lose = h_opp["AGT"]+h_opp["GAT"]
	print ("AG or GA -> G vs.T: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	win = h_opp["GGG"]
	lose = h_opp["GGT"]
	print ("GG -> G vs.T: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	win = h_opp["GGA"]
	lose = h_opp["GGC"]
	print ("GG -> A vs.C: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
##########################################################
	lose = h_opp["CCA"]
	win = h_opp["CCC"]
	print ("CC -> A vs.C: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	lose = h_opp["CCG"]
	win = h_opp["CCT"]
	print ("CC -> G vs.T: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	lose = h_opp["CTA"]+h_opp["TCA"]
	win = h_opp["CTC"]+h_opp["TCC"]
	print ("CT or TC -> A vs.C: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	lose = h_opp["CTG"]+h_opp["TCG"]
	win = h_opp["CTT"]+h_opp["TCT"]
	print ("CT or TC -> G vs.T: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	lose = h_opp["TTG"]
	win = h_opp["TTT"]
	print ("TT -> G vs.T: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	lose = h_opp["TTA"]
	win = h_opp["TTC"]
	print ("TT -> A vs.C: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
##########################################################
	win = h_opp["ACA"]+h_opp["ACG"]+h_opp["CAA"]+h_opp["CAG"]
	lose = h_opp["ACC"]+h_opp["ACT"]+h_opp["CAC"]+h_opp["CAT"]
	print ("AC or CA -> AG vs.CT: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	win = h_opp["ATA"]+h_opp["ATG"]+h_opp["TAA"]+h_opp["TAG"]
	lose = h_opp["ATC"]+h_opp["ATT"]+h_opp["TAC"]+h_opp["TAT"]
	print ("AT or TA -> AG vs.CT: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	win = h_opp["CGA"]+h_opp["CGG"]+h_opp["GCA"]+h_opp["GCG"]
	lose = h_opp["CGC"]+h_opp["CGT"]+h_opp["GCC"]+h_opp["GCT"]
	print ("CG or GC -> AG vs.CT: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	win = h_opp["GTA"]+h_opp["GTG"]+h_opp["TGA"]+h_opp["TGG"]
	lose = h_opp["GTC"]+h_opp["GTT"]+h_opp["TGC"]+h_opp["TGT"]
	print ("GT or TG -> AG vs.CT: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
	fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
##########################################################
	history = history + h_opp
fout.close()
fout = open("history.txt",'w')
##########################################################
print"##########################################################"
win = history["AAA"]
lose = history["AAC"]
print ("AA -> A vs.C: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
win = history["AAG"]
lose = history["AAT"]
print ("AA -> G vs.T: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
win = history["AGA"]+history["GAA"]
lose = history["AGC"]+history["GAC"]
print ("AG or GA -> A vs.C: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
win = history["AGG"]+history["GAG"]
lose = history["AGT"]+history["GAT"]
print ("AG or GA -> G vs.T: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
win = history["GGG"]
lose = history["GGT"]
print ("GG -> G vs.T: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
win = history["GGA"]
lose = history["GGC"]
print ("GG -> A vs.C: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
##########################################################
lose = history["CCA"]
win = history["CCC"]
print ("CC -> A vs.C: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
lose = history["CCG"]
win = history["CCT"]
print ("CC -> G vs.T: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
lose = history["CTA"]+history["TCA"]
win = history["CTC"]+history["TCC"]
print ("CT or TC -> A vs.C: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
lose = history["CTG"]+history["TCG"]
win = history["CTT"]+history["TCT"]
print ("CT or TC -> G vs.T: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
lose = history["TTG"]
win = history["TTT"]
print ("TT -> G vs.T: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
lose = history["TTA"]
win = history["TTC"]
print ("TT -> A vs.C: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
##########################################################
win = history["ACA"]+history["ACG"]+history["CAA"]+history["CAG"]
lose = history["ACC"]+history["ACT"]+history["CAC"]+history["CAT"]
print ("AC or CA -> AG vs.CT: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
win = history["ATA"]+history["ATG"]+history["TAA"]+history["TAG"]
lose = history["ATC"]+history["ATT"]+history["TAC"]+history["TAT"]
print ("AT or TA -> AG vs.CT: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
win = history["CGA"]+history["CGG"]+history["GCA"]+history["GCG"]
lose = history["CGC"]+history["CGT"]+history["GCC"]+history["GCT"]
print ("CG or GC -> AG vs.CT: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
win = history["GTA"]+history["GTG"]+history["TGA"]+history["TGG"]
lose = history["GTC"]+history["GTT"]+history["TGC"]+history["TGT"]
print ("GT or TG -> AG vs.CT: %d %d %2.2f"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
fout.write("%d\t%d\t%2.2f\n"%(win/2,lose/2,win*1.0/(win+lose+0.00001)))
##########################################################
#		print("%s %s %.3f"%(predict,answer,odds))
fout.close()
